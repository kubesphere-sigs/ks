apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: goreleaser-release
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Automation, Publishing
    tekton.dev/tags: golang, release-automation, package
    tekton.dev/displayName: "GoReleaser"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: |-
    GoReleaser builds Go binaries for several platforms.
    It creates a GitHub release and then pushes a Homebrew formula to a tap repository.
  params:
    - description: base package to build in
      name: package
      type: string
    - default: bot-token-github
      description: name of the secret holding the github-token
      name: github-token-secret
      type: string
    - default: bot-token
      description: name of the secret key holding the github-token
      name: github-token-secret-key
      type: string
    - default: --timeout=30m
      description: flags to pass to `goreleaser release`
      name: flags
      type: string
    - default: docker.io/goreleaser/goreleaser@sha256:0e87d0e33840a556d3b9c10a7f71a3a69bcd9c29b86a180cbbf7d7ad1f3fa280
      description: container image location for goreleaser
      name: image
      type: string
    - name: insecure_registry
      description: Allows the user to push to an insecure registry that has been specified
      default: ""
    - name: dind_image
      description: The location of the docker-in-docker image.
      default: docker:dind
  steps:
    - image: $(params.image)
      name: fetch-all-tags
      script: |
        git status
        git diff
        git fetch -p --all
      workingDir: $(workspaces.source.path)
    - name: release
      image: $(params.image)
      env:
        - name: GOPATH
          value: /workspace
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              key: $(params.github-token-secret-key)
              name: $(params.github-token-secret)
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Verify TLS.
        - name: DOCKER_HOST
          value: tcp://localhost:2376
        # Use the certs generated by the sidecard daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
      script: |
        apk add --no-cache upx
        goreleaser release $(params.flags)
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      workingDir: $(workspaces.source.path)
  sidecars:
  - image: $(params.dind_image)
    name: server
    args:
      - --storage-driver=vfs
      - --userland-proxy=false
      - --debug
    securityContext:
      privileged: true
    env:
    # Write generated certs to the path shared with the client.
    - name: DOCKER_TLS_CERTDIR
      value: /certs
    volumeMounts:
    - mountPath: /certs/client
      name: dind-certs
    # Wait for the dind daemon to generate the certs it will share with the
    # client.
    readinessProbe:
      periodSeconds: 1
      exec:
        command: ['ls', '/certs/client/ca.pem']
  workspaces:
    - description: The workspace containing the Go source code which needs to be released.
      mountPath: /workspace/src/$(params.package)
      name: source
  volumes:
    - name: dind-certs
      emptyDir: {}
